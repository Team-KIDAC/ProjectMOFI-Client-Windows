//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IAttendeeClient {

    getAttendees(): Promise<string | null>;

    postRecognizableImageTest(imageDuo: ImageDuo): Promise<string | null>;
}

export class AttendeeClient implements IAttendeeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://mofiapi.azurewebsites.net";
        //this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7055";
    }

    getAttendees(): Promise<string | null> {
        let url_ = this.baseUrl + "/Attendee";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAttendees(_response);
        });
    }

    protected processGetAttendees(response: Response): Promise<string | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            return response.text().then((_responseText: string) => {
                return Promise.resolve<string>(_responseText);
            });
            //const myRes = JSON.parse(Promise.resolve<string>(response.text()));
            //const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            //const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            //const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            //var blobedResp: FileResponse | null;
            //response.blob().then(blob => {
            //    blobedResp = { fileName: fileName, data: blob, status: status, headers: _headers };
            //});
            //return Promise.resolve<FileResponse | null>(blobedResp);
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string | null>(null as any);
    }

    postRecognizableImageTest(imageDuo: ImageDuo): Promise<string | null> {
        let url_ = this.baseUrl + "/Attendee/RecognizeImageTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(imageDuo);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostRecognizableImageTest(_response);
        });
    }

    protected processPostRecognizableImageTest(response: Response): Promise<string | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            return response.text().then((_responseText: string) => {
                return Promise.resolve<string>(_responseText);
            });
            //const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            //const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            //const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            //return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string | null>(null as any);
    }
}

export class ImageDuo implements IImageDuo {
    base64String!: string;

    constructor(data?: IImageDuo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.base64String = _data["base64String"];
        }
    }

    static fromJS(data: any): ImageDuo {
        data = typeof data === 'object' ? data : {};
        let result = new ImageDuo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["base64String"] = this.base64String;
        return data;
    }
}

export interface IImageDuo {
    base64String: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}